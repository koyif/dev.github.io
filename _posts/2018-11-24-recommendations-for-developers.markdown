---
layout: post
title:  "Рекомендации для разработчиков"
date:   2018-11-24 12:26:34 +0500
categories: dev
---

### IDE
В нашей компании рекомендуется использовать для разработки **Intellij IDEA**.

### Форматирование кода
В разных проектах могут быть разные требования к форматированию кода: где-то это устанавливается на уровне устных договоренностей, где-то формализуется через специальный xml-файл (обычно лежит в проекте по адресу `/config/checkstyle` на одном уровне с `src`)

В любом случае, вливаясь в проект, мы должны придерживаться того стиля, который уже сформирован. И если он не оговорен и не формализован, то придется ориентироваться по самому коду - так бывает.

Если же начинается новый проект и в вашей компании нет формализованного code-style, то лучше использовать стандартный стиль IDEA.

#### Как установить настройки по умолчанию:

1. Зайдите в настройки IDE (`Ctrl + Alt + S`)
2. Откройте настройки **Editor** – **Code Style**
3. Выберите Default-схему, если она не была выбрана ранее.
4. Примените изменения.

<div class="img_container">
![Установка настроек стиля кода по умолчанию](/assets/img/2018-11-24-recommendations-for-developers/set-default-codestyle-in-intellij-idea.png)
</div>


Перед любым коммитой, необходимо запускать автоматическое форматирование кода. В первый раз для настройки форматирования нажмите `Ctrl + Alt + Shift + L`. Приведите форму в соответствие со следующим изображением:

<div class="img_container">
![Настройка переформатирования кода](/assets/img/2018-11-24-recommendations-for-developers/reformat-settings.png)
</div>

Нажмите «Run». Настройки сохранятся и код будет отформатирован в соответствии с правилами.

В дальнейшем можно запускать форматирование сочетанием клавиш: `Ctrl + Alt + L`.

Очень нежелательно, чтобы реформат кода затрагивал код, который был написан ранее (не вами). Допустимо только удаление неиспользуемых импортов.
Чтобы не затрагивать чужой код, можно выделить свой код и нажать `Ctrl + Alt + L`. В данном случае реформат затронет только выделенную часть.



#### Автоматическая проверка кода
Intellij IDEA зачастую подсказывает разработчику о совершении им простейших ошибок, подсвечивая их. Данные ошибки должны быть исправлены, либо в комментарии обоснована невозможность исправления.

Перед каждым коммитом, необходимо запускать анализ написанного кода с помощью плагина [SonarLint](https://www.sonarlint.org/intellij/){:target="_blank"}. Установить можно через **плагины Intellij IDEA**.



#### Тестирование
Обязательность unit-тестирования тоже зависит от конкретного проекта. Наличие тестов может быть обязательным условием перевода задачи в статус "Выполнено". В некоторых случаях тесты пишутся по необходимости. Но если вы пишете сложный функционал, то тесты необходимы и в первую очередь для вас же.

Перед коммитом должны быть прогнаны все тесты проекта. При наличии ошибок, исправления вносит разработчик, чей код привел к падению теста. Т.е. если тест отрабатывал до внесения изменений в код, а после не отрабатывает, то исправлять это придется автору внесенных изменений.

На проекте, скорее всего, будут тестировщики, но это не отменяет необходимости dev-тестирования. Проверяйте, что ваш функционал работает не только в штатных ситуациях.



#### Git
С репозиторием работаем в формате [git flow](https://danielkummer.github.io/git-flow-cheatsheet/index.ru_RU.html){:target="_blank"} - это максимально удобный и логичный процесс.

Соглашение по именованию коммитов:

> [NF] - New Functionality/Features: новый функционал
> 
> [CF] - Current Functionality: доработка существующего функционала
> 
> [BF] - Bug Fix: исправление ошибок
> 
> [RF] - ReFactoring: доработка кода, не затрагивающая бизнес-логику



Все комиты должны иметь конкретное описание того, что вы делали. Нельзя делать много коммитов с одним названием (например, названием задачи).

Название коммита лучше всего начинать с идентификатора задачи:

> [NF] TASK_ID-1: Добавление таблицы ipra_pra_rap.
> 
> [NF] TASK_ID-1: Скрипт заполнения таблицы ipra_pra_rap данными.
> 
> [NF] TASK_ID-1: Исправления формата sql-кода.


#### Документирование кода
Необходимо писать JavaDoc’и.

Не скупитесь подробно описывать особо сложные методы. Разработчики, которые будут сопровождать ваш код, скажут вам спасибо!
